generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  create_date  DateTime @default(now())
  updated_date DateTime @updatedAt
  user         User[]
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  username    String   @unique
  password    String
  image       String?
  phone       String
  email       String
  salary      Int
  role_id     Int
  status      Int      @default(1)
  create_date DateTime @default(now())
  update_date DateTime @updatedAt

  role     Role             @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders   Order[]
  products ProductInOrder[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  desc        String?
  image       String?
  create_date DateTime @default(now())
  update_date DateTime @updatedAt

  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Int
  category_id Int
  desc        String?
  image       String?
  create_date DateTime @default(now())
  update_date DateTime @updatedAt

  category Category         @relation(references: [id], fields: [category_id], onDelete: Cascade, onUpdate: Cascade)
  products ProductInOrder[]
}

model Order {
  id          Int      @id @default(autoincrement())
  title       String
  desc        String?
  user_id     Int
  room_id     Int?     
  total_price Int      @default(0)
  status      Int      @default(1)
  create_date String
  update_date DateTime @updatedAt

  user     User             @relation(references: [id], fields: [user_id], onDelete: Cascade, onUpdate: Cascade)
  room     Room?            @relation(references: [id], fields: [room_id], onDelete: SetNull, onUpdate: Cascade)
  products ProductInOrder[]
}

model ProductInOrder {
  id          Int      @id @default(autoincrement())
  user_id     Int
  order_id    Int
  product_id  Int
  count       Int
  status      Int      @default(0)
  total_price Int      @default(0)
  create_date DateTime @default(now())
  update_date DateTime @updatedAt

  user    User    @relation(references: [id], fields: [user_id], onDelete: Cascade, onUpdate: Cascade)
  order   Order   @relation(references: [id], fields: [order_id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(references: [id], fields: [product_id], onDelete: Cascade, onUpdate: Cascade)
}

model Room {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  desc        String?
  capacity    Int
  image       String?
  booked      Boolean  @default(false)
  create_date DateTime @default(now())
  update_date DateTime @updatedAt

  orders Order[]
}
